apply plugin: "jaci.openrio.gradle.GradleRIO"

import jaci.openrio.gradle.GradleRIOPlugin
import jaci.openrio.gradle.frc.FRCJavaArtifact
import jaci.openrio.gradle.frc.RoboRIO
import jaci.openrio.gradle.wpi.dependencies.WPIToolsPlugin
import jaci.openrio.gradle.ExternalLaunchTask

def TEAM = 1089
def ROBOT_CLASS = "org.usfirst.frc.team1089.robot.Robot"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        target("roborio", RoboRIO) {
            team = TEAM
        }
    }
    artifacts {
        artifact('robotArtifact', FRCJavaArtifact) {
            targets << "roborio"
        }

        fileCollectionArtifact('configCollectionArtifact') {
            targets << 'roborio'
            files = project.configurations.config
            after('robotArtifact')
        }
    }
}

// Overwrite this task b/c the default GradleRIO
// task doesn't function as it should.
task shuffleboard(overwrite: true) {
    group = null
    description = "A task that doesn't work like it should. Please see :shuffleboard " +
            "for functioning tasks."

    doLast {
        System.out.println("Please see :shuffleboard for functioning tasks.")
    }
}

// Defining my dependencies. In this case, WPILib (+ friends), CTRE Phoenix
// and NavX.
dependencies {
    compile wpilib()
    compile ctre()
    compile navx()
    compile pathfinder()
    nativeLib fileTree(dir: 'lib', include: '*.so')
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    manifest GradleRIOPlugin.javaManifest(ROBOT_CLASS)
}